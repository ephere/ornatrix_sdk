// Public parameter definition - generated automatically

// Must compile with VC 2012 / GCC 4.8

#pragma once

#include "Ephere/Core/Parameters/Parameters.h"
#include "Ephere/Ornatrix/Groom/IGraph.h"

namespace Ephere { namespace Geometry {
struct SurfacePosition;
} }

namespace Ephere { namespace Ornatrix {
struct HairParameter;
struct PolygonMeshParameter;
} }

namespace Ephere { namespace Ornatrix {

struct GroomerParameters
{
	enum { Version = 1 };

	enum { HighestId = 12, FirstUnusedId = 13 };

	static char const* GetName() { return "GroomerParameters"; }

	enum class AxisType
	{
		X,
		Y,
		Z,
	};

	struct TargetHair : Parameters::ParameterDescriptor<GroomerParameters, 1, Ephere::Ornatrix::HairParameter, Parameters::Direction::InOut, Parameters::Purpose::Undefined, true>
	{
		static char const* Name() { return "TargetHair"; }
	};

	struct DistributionMesh : Parameters::ParameterDescriptor<GroomerParameters, 2, Ephere::Ornatrix::PolygonMeshParameter, Parameters::Direction::In, Parameters::Purpose::DistributionMesh>
	{
		static char const* Name() { return "DistributionMesh"; }
	};

	// File path for Ornatrix grooms
	struct GroomFile : Parameters::ParameterDescriptor<GroomerParameters, 3, Ephere::Parameters::String, Parameters::Direction::In, Parameters::Purpose::FilePath>
	{
		static char const* Name() { return "GroomFile"; }

		static char const* DefaultValue() { return ""; }
	};

	// Stores the surface positions of the groom's internal graft surface vertices, relative to groom's distribution surface
	struct GraftSurfaceVertexPositions : Parameters::ParameterDescriptor<GroomerParameters, 4, Ephere::Geometry::SurfacePosition[]>
	{
		static char const* Name() { return "GraftSurfaceVertexPositions"; }
	};

	// An internal parameter set during fitting which determines if the graft surface was flipped horizontally during fitting and thus needs its normals to be flipped as well
	struct FlipGraftSurfaceNormals : Parameters::ParameterDescriptor<GroomerParameters, 5, bool>
	{
		static char const* Name() { return "FlipGraftSurfaceNormals"; }

		static bool DefaultValue() { return false; }
	};

	// Scaling applied to the loaded groom's distance parameters
	struct ScaleFactor : Parameters::ParameterDescriptor<GroomerParameters, 6, float, Parameters::Direction::In, Parameters::Purpose::Fraction>
	{
		static char const* Name() { return "ScaleFactor"; }

		static float DefaultValue() { return 1.0f; }
	};

	// List of parameters with their types
	struct ParamTypesList : Parameters::ParameterDescriptor<GroomerParameters, 7, Ephere::Parameters::String>
	{
		static char const* Name() { return "ParamTypesList"; }

		static char const* DefaultValue() { return ""; }
	};

	// Serialized groom graph when it is not referenced through a file
	struct Graph : Parameters::ParameterDescriptor<GroomerParameters, 8, SharedPtr<Groom::IGraph>>
	{
		static char const* Name() { return "Graph"; }
	};

	struct IsRendering : Parameters::ParameterDescriptor<GroomerParameters, 9, bool, Parameters::Direction::In, Parameters::Purpose::Undefined, true>
	{
		static char const* Name() { return "IsRendering"; }

		static bool DefaultValue() { return false; }
	};

	struct Mirror
	{
		// When on, the hair generated by the groom will be duplicated and mirrored. Useful for eyelashes and eyebrows.
		struct Enable : Parameters::ParameterDescriptor<GroomerParameters, 10, bool>
		{
			static char const* Name() { return "Mirror.Enable"; }

			static bool DefaultValue() { return false; }
		};

		// When mirroring is enabled specifies the object-space axis of the mirror plane
		struct Axis : Parameters::ParameterDescriptor<GroomerParameters, 11, AxisType>
		{
			static char const* Name() { return "Mirror.Axis"; }

			static AxisType DefaultValue() { return AxisType::X; }
		};

		// Changes the random seed of the mirrored groom to make it distinct from the original groom
		struct Randomize : Parameters::ParameterDescriptor<GroomerParameters, 12, bool>
		{
			static char const* Name() { return "Mirror.Randomize"; }

			static bool DefaultValue() { return true; }
		};
	};

	struct Descriptor;
	struct Container;
};

} }

namespace Ephere
{
template <> struct GetEnumInfo<Ephere::Ornatrix::GroomerParameters::AxisType>
{
	enum { Count = 3 };

	static char const* GetValueName( Ephere::Ornatrix::GroomerParameters::AxisType value )
	{
		using namespace Ephere::Ornatrix;
		switch( value )
		{
			case GroomerParameters::AxisType::X: return "X";
			case GroomerParameters::AxisType::Y: return "Y";
			case GroomerParameters::AxisType::Z: return "Z";
			default: return "";
		}
	}
};
}
